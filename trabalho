#include<stdio.h>
#include<stdlib.h>
#include<string.h>

//Criando a estrutura de castro dos clientes
typedef struct Scadastro{
    char nome[30];
    int contato;
    int cpf;
    char forma_quit[100];
}cadastro;

//Criando a struct lista
typedef struct Scelula{
    cadastro info;
    struct Scelula *next;
}CELULA;

//criar um nó
CELULA* getnode(){
    return(CELULA*) malloc (sizeof(CELULA));
}

//Liberando o nó
void freenode(CELULA *q){
    free(q);
}

//inicializar lista
void inicializarlista(CELULA**lista){
    *lista=NULL;
 }

//Verificar se está vazia
int empty(CELULA* lista){
    if(lista==NULL){
        return 1;
    }
    return 0;
}

//inserir os elementos no inicio da lista
int insereinicio(CELULA**lista, cadastro x){
    CELULA* q;
    q=getnode();
    if(q!=NULL){
        q->info=x;
        q->next=*lista;
        *lista=q;
    }else{
        printf("ERRO NA INSERÇÃO");
        exit(1);
    } 
    return 1;
}

//Pesquisar o cliente na lista
CELULA* pesquisar(CELULA* lista, cadastro x){
    CELULA* q;
        if(!empty(lista)){
            q=lista;
            while(q!=NULL){
                if(q->info.cpf==x.cpf){
                return q;
            }
            q=q->next;
            }
            return 0;
        }
}

//Função de verificação de negociação
int negociar (CELULA* lista, cadastro x){
    int veri; // variavel para verificação da negociação;
	CELULA* q;
	q->info;
	printf(" A divida foi negociada? 1- Sim 2- Não");
	scanf("%d",&veri);
	do{
	    if(veri==1){
	    freenode(q);
		return 1;
		}else if( veri==2){
		moverprafrente(lista,x);
		return ;
		}
	}while((veri!=1)||(veri!=2));
}

//imprimir
void imprimir(CELULA** lista, cadastro x){
	CELULA* aux;
	aux=*lista;
	if(!empty(*lista)){
		while(aux!=NULL){
	        printf("%s\t", aux->info.nome);
		    printf("\n");
		    printf("%d\t", aux->info.contato);
	        printf("\n");
		    printf("%d\t", aux->info.cpf);
	        printf("\n");
	        printf("%s\t", aux->info.forma_quit);
	        printf("\n");	
	        negociar(*lista, x);
	        printf("\n");
        }
	}else{
		printf("Lista Vazia \n");
		exit(1);
	}
}

//Remover Inicio
void removerinicio(CELULA* lista, cadastro x){
    CELULA* q;
    if(!empty(lista)){
        lista=q->next;
        freenode(q);
    }else{
        printf("ERRO, A LISTA ESTA VAZIA\n");
        exit(1);
    }
}

//remover cliente que negociou a sua dívida;
int remover(CELULA** lista, cadastro x){
    CELULA* q;
    CELULA* aux;
    if((q=pesquisar(*lista,x))!=NULL){
        aux=*lista;
        if(aux==q)
            removerinicio(*lista,x);
        }else{
            while(aux->next!=q){
                aux=aux->next;
                freenode(q);
            }
            return 1; //removeu
        }
    return 0; //não removeu
}

//mover para frente
int moverprafrente(CELULA* ptrlista, cadastro x){
	CELULA* anterior;
	CELULA* atual;
	CELULA* aux;
	if(atual!=NULL){
		anterior->next=aux;
		aux=atual->next;
		atual->next=ptrlista;
		anterior->next=atual->next;
		freenode(aux);
		}
}
	
//preencher cadastro
int preencher_cadastro(CELULA** lista, cadastro x){
  
    printf("Digite o nome do cliente:");
    fflush(stdin); 
    scanf("%s", &x.nome);
    printf("\n");
    
    printf("Digite o contato do cliente:");
    scanf("%d", &x.contato);
    printf("\n");
    
	printf("Digite o cpf do cliente:");
    scanf("%d", &x.cpf);
    printf("\n");
    
	printf("Digite a forma de parcelamento oferecida para o cliente:");
	fflush(stdin); 
    scanf("%s", &x.forma_quit);
    printf("\n");
    
    insereinicio(lista, x);
    return 1;
}

void imprimir2(CELULA** lista){
    CELULA* aux;
    aux=*lista;
    if(!empty(*lista)){
        while(aux!=*lista){
		printf("%s\t", aux->info.nome);
		printf("\n");
		printf("%d\t", aux->info.contato);
		printf("\n");
		printf("%d\t", aux->info.cpf);
		printf("\n");
		printf("%s\t", aux->info.forma_quit);
		printf("\n");	
	    }
	}else{
		printf("Erro Lista Vazia");
		return;
	}
}

int main(){
    cadastro x;
    CELULA *ptrlista;
    int qtd;
    int opcao=0;
  
    while (opcao!=2){
        printf("Digite a opcao que deseja realizar: \n1- Cadastrar \n2- Imprimir Lista para Negociacao\n3-Imprimir lista de todos os clientes \n");
        scanf("%d",&opcao);
        printf("\n");
  
        switch (opcao){ //menu de opções sobre a lista
  	        case 1: //Cadastrar os clientes
  		        preencher_cadastro(&ptrlista, x);
                break;
			  		
            case 2: //Imprimir os clientes cadastrados
  		        imprimir(&ptrlista, x);
  		        break;
  		    
  	        case 3:
	            imprimir2(&ptrlista);
	  	        break;
	    }
	}
	system("pause");
	return 0;
}
